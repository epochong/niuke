package www.niuke.class_05;
/*
* 经典的服务器抗压结构
* 有一个前端接受request，带相同的hash函数模3信息存到对应的机器上
* 有一个后端集群组0,1,2
* 0,1,2抗压均衡(每一台机器的指标大致相同)
* 当想加或减机器的时候这个结构就不行了原来是3，现在100，数据归属全都变了
* 必须把所有东西拿出来从新存入
*
* 一致性哈希：把数据迁移的代价变得很低，并且还能负载均衡
* 将数据连成一个环(覆盖所有S域)三台机器均匀的分布到数据上，hash算出来的值放到顺时针最近的机器
* 后端3台机器ip地址hash后排序成数组，放到每一个前端服务器上，request算过hash在数组中中第一个大于他的值就在这上
* 增加机器时
*
* 问题：机器数量少的时候，不能均分环，hash函数均匀性不能保证，可能离得很近
* 即便是均匀的，加机器也会破坏均匀的结构
* 解决方法：虚拟节点技术
* 每个机器对应1000个虚拟节点，虚拟节点对应着区域，在这个区域的都归这个节点
* 存在问题：哈希碰撞，概率很低，即便碰撞就碰撞两台机器存一个数据
*
* 集群化，抗压，分布式内存都会用到
* 亚马逊：一面第三题
* */
public class ConsistentHash {

}
